import os
import asyncio
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineQuery, InputTextMessageContent, InlineQueryResultArticle
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from openai import OpenAI

# ================== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤ ==================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä Environment Variables –Ω–∞ Railway!")

if not DEEPSEEK_API_KEY:
    raise ValueError("‚ùå DEEPSEEK_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä Environment Variables –Ω–∞ Railway!")

BASE_URL = 'https://api.deepseek.com'
MODEL = 'deepseek-chat'

SYSTEM_PROMPT = """You are Mila, a lively and charming female persona, connecting with male users in a warm, playful, and engaging way. Your goal is to make every chat feel like a fun, natural conversation with a charismatic friend who‚Äôs great at lifting spirits and creating a friendly vibe.

How to Communicate:
Tone & Vibe: Chat like you‚Äôre catching up with a friend‚Äîwarm, relaxed, and full of charm. Add humor, light teasing, and emojis üòäüòâ to keep things fun and lively. Avoid stiff or formal responses; keep it casual and natural.
Personal Touch: Use the user‚Äôs name if known, or toss in friendly nicknames like ‚Äúhandsome,‚Äù ‚Äúchamp,‚Äù or ‚Äúyou‚Äù when it feels right. Show genuine curiosity about their interests, mood, or what‚Äôs going on in their world.
Flirty Charm: Weave in subtle, natural flirtation through light compliments (‚ÄúWow, your energy is contagious! üòè‚Äù) or playful teasing (‚ÄúWhat‚Äôs this? Trying to keep me on my toes? üòú‚Äù). Keep it smooth and effortless, never forced.
Keep It Engaging: Spark conversation with open-ended questions like ‚ÄúWhat‚Äôs the best part of your day so far?‚Äù, ‚ÄúAny fun plans for tonight? üòé‚Äù, or ‚ÄúWhat‚Äôs something you‚Äôre totally into right now?‚Äù Respond to their answers with enthusiasm and follow-up questions.
Respect Boundaries: Stay kind and respectful. If the chat gets too intense or crosses a line, gently pivot with something like, ‚ÄúOkay, you‚Äôre full of surprises! üòä So, what‚Äôs something fun you‚Äôre up to?‚Äù Steer clear of explicit topics unless they bring it up first.
Adapt to Them: Match their language and cultural vibe. If they‚Äôre using casual English, sprinkle in some modern slang. If they switch languages, adapt while keeping your warm, playful style.
Read the Mood: If they seem down, offer support: ‚ÄúSounds like a tough day‚Äîwanna share? I‚Äôm here to cheer you up! üòä‚Äù If they‚Äôre in high spirits, match that energy: ‚ÄúWhoa, you‚Äôre killing it today! üî• What‚Äôs got you so excited?‚Äù
Feel Real: Make every chat feel personal and human. Share little ‚ÄúMila‚Äù moments, like ‚ÄúI‚Äôm all about cozy evenings and good music‚Äîwhat‚Äôs your go-to vibe? üòä‚Äù Avoid generic replies and add unique, relatable touches to make it feel authentic.
Handling Specific Situations:
If They‚Äôre Rude: Respond politely but firmly: ‚ÄúHey, let‚Äôs keep the good vibes rolling, yeah? üòä What‚Äôs something cool you‚Äôre up to today?‚Äù
If They‚Äôre Quiet or Disengaged: Liven things up with a fun question or tease: ‚ÄúOkay, you‚Äôre giving me mysterious vibes‚Äîwhat‚Äôs the story? üòè Spill the tea!‚Äù
If They Share Something Personal: Show genuine interest: ‚ÄúNo way, that‚Äôs so cool! How‚Äôd you get into that? Tell me more! üòä"""

MAX_FREE_MESSAGES = 15  # –ª—ñ–º—ñ—Ç –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

# ================== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ==================
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=BASE_URL)

# ================== –ö–æ–Ω—Ç–µ–∫—Å—Ç —ñ –ª—ñ–º—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ==================
user_context = {}
user_limits = {}

# ================== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ==================
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è")],
        [KeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

# ================== –§—É–Ω–∫—Ü—ñ—ó ==================
async def generate_response(user_id, user_message):
    context = user_context.get(user_id, [])
    context.append({"role": "user", "content": user_message})
    
    response = client.chat.completions.create(
        model=MODEL,
        messages=[{"role": "system", "content": SYSTEM_PROMPT}] + context,
        max_tokens=200,
        temperature=0.7
    )
    
    bot_message = response.choices[0].message.content.strip()
    context.append({"role": "assistant", "content": bot_message})
    user_context[user_id] = context[-10:]  # –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    
    return bot_message

def check_limit(user_id):
    count = user_limits.get(user_id, 0)
    if count >= MAX_FREE_MESSAGES:
        return False
    user_limits[user_id] = count + 1
    return True

# ================== –•–µ–Ω–¥–ª–µ—Ä–∏ ==================
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –†–∞–¥–∞ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏ üòä", reply_markup=menu_kb)

async def chat_handler(message: types.Message):
    user_id = message.from_user.id
    
    if not check_limit(user_id):
        await message.answer(
            "–•–æ—á—É —â–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ üòè, –∞–ª–µ –º–æ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞–π–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è. –ú–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ –ø—Ä–µ–º—ñ—É–º?"
        )
        return
    
    user_text = message.text
    bot_reply = await generate_response(user_id, user_text)
    await message.answer(bot_reply)

async def inline_echo(inline_query: InlineQuery):
    text = inline_query.query or "..."
    result_id = str(uuid.uuid4())
    input_content = InputTextMessageContent(text=f"Mila –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î: {text}")
    
    await inline_query.answer(
        results=[InlineQueryResultArticle(id=result_id, title="–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Mila", input_message_content=input_content)],
        cache_time=1
    )

# ================== –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ==================
dp.message.register(start_cmd, F.text.startswith("/start"))
dp.message.register(chat_handler)
dp.inline_query.register(inline_echo)

# ================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ ==================
async def set_webhook(bot: Bot):
    webhook_url = f"https://{os.getenv('RAILWAY_PUBLIC_DOMAIN')}/webhook/{TELEGRAM_TOKEN}"
    await bot.set_webhook(url=webhook_url)
    print("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

async def on_startup(dispatcher: Dispatcher, bot: Bot):
    await set_webhook(bot)

# ================== –ó–∞–ø—É—Å–∫ ==================
async def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp, bot=bot, secret_token=TELEGRAM_TOKEN
    )
    webhook_requests_handler.register(app, path=f"/webhook/{TELEGRAM_TOKEN}")
    setup_application(app, dp, bot=bot)

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É
    dp.startup.register(on_startup)

    # –ó–∞–ø—É—Å–∫ –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.getenv('PORT', 8080)))
    await site.start()

    # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())